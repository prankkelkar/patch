--- /root/tryme/protobuf/ruby/ext/google/protobuf_c/upb.c	2019-04-11 09:26:25.773821871 +0530
+++ ruby/ext/google/protobuf_c/upb.c	2019-04-10 17:58:50.320296400 +0530
@@ -6425,9 +6425,10 @@
 /* A simple "subclass" of upb_table that only adds a hash function for strings. */
 
 static upb_tabkey strcopy(lookupkey_t k2, upb_alloc *a) {
+  uint32_t len = (uint32_t) k2.str.len;
   char *str = upb_malloc(a, k2.str.len + sizeof(uint32_t) + 1);
   if (str == NULL) return 0;
-  memcpy(str, &k2.str.len, sizeof(uint32_t));
+  memcpy(str, &len, sizeof(uint32_t));
   memcpy(str + sizeof(uint32_t), k2.str.str, k2.str.len + 1);
   return (uintptr_t)str;
 }
@@ -6880,7 +6881,7 @@
          i1->array_part == i2->array_part;
 }
 
-#ifdef UPB_UNALIGNED_READS_OK
+#if defined(UPB_UNALIGNED_READS_OK) || defined(__s390x__)
 /* -----------------------------------------------------------------------------
  * MurmurHash2, by Austin Appleby (released as public domain).
  * Reformatted and C99-ified by Joshua Haberman.
@@ -9601,6 +9602,7 @@
       case OP_SETDISPATCH: {
         const upb_inttable *dispatch;
         memcpy(&dispatch, p, sizeof(void*));
+	d->top->dispatch =(upb_inttable *)( ((long int)d->top->dispatch & 0x00000000FFFFFFFF) << 32 | ((long int)d->top->dispatch & 0xFFFFFFFF00000000) >> 32) ;
         p += ptr_words;
         const upb_pbdecodermethod *method =
             (void *)((char *)dispatch -
@@ -10937,7 +10939,8 @@
       VMCASE(OP_SETDISPATCH,
         d->top->base = d->pc - 1;
         memcpy(&d->top->dispatch, d->pc, sizeof(void*));
-        d->pc += sizeof(void*) / sizeof(uint32_t);
+       d->top->dispatch =(upb_inttable *)( ((long int)d->top->dispatch & 0x00000000FFFFFFFF) << 32 | ((long int)d->top->dispatch & 0xFFFFFFFF00000000) >> 32) ;
+       	d->pc += sizeof(void*) / sizeof(uint32_t);
       )
       VMCASE(OP_STARTMSG,
         CHECK_SUSPEND(upb_sink_startmsg(&d->top->sink));
